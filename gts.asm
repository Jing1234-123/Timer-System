.MODEL SMALL
.STACK 100
.DATA
;------------MAIN MENU 
	M DB  13,10,"		Great Timer System$"
	M1 DB 13,10,"		1. Alarm"
	   DB 13,10,"		2. Timer"
	   DB 13,10,"		3. Bedtime Analysis"
	   DB 13,10,"		4. World Clock"
	   DB 13,10,"		5. Change Alarm Sound"
	   DB 13,10,"		6. Exit"
	   DB 13,10,13,10,"Please enter your option (1-6): $"
	M2 DB 13,10,"Invalid input!!! You are only allowed to enter 1-6."
	   DB 13,10,"Please enter again: $"
	MOPTION DB ?
		
;---------------ALARM	
	ALM DB 13,10,13,10,"================"
		DB 13,10,"     ALARM "
		DB 13,10, "================$"
	S3 DB "Press (Y) to snooze or (S) to stop the alarm $"
	S4 DB "Alarm is stopped.$"
	S5 DB 13,10,13,10,"Enter the time of alarm to be set in (HH:MM) format: $"
	S6 DB 13,10,"Alarm is set successfully!$"
	S7 DB 13,10,13,10,"Do you want to change the snooze duration? [Default = 1 min]"
	   DB 13,10,"Press Y for (YES) and N for (NO): $"
	S8 DB 13,10,"Enter the snooze duration that you wished (1-9 mins): $"
	S9 DB 13,10,13,10,"Alarm is working...$"
	S10 DB 13,10,13,10,"The alarm is snoozing for $"
	S11 DB " minute(s)."
	S12 DB ". $"
	S13 DB 13,10,13,10,"Add more alarm? (Y-Yes, N-No): $"
	S14 DB 13,10,13,10,"Press (X) to QUIT the alarm or (A) to ADD/DELETE alarm.$"
	S15 DB 13,10,13,10,"No alarm currently."
		DB 13,10,13,10,"Press (A) for ADD alarm or (X) to go back main menu : $"
	S16 DB 13,10,13,10,"Delete(D) or Proceed(P): $"
	S17 DB 13,10,13,10,"Please enter the alarm number that you want to delete or (X) to go back: $"
	S18   DB 13,10,13,10,"Add(A) or Delete(D) or Proceed(P): $"
	S30   DB " alarm is ringing!$"
	NOTES DW 4560,3619,3416,3043,2711
	
	COLOR DB 2FH,3FH,4FH,5FH,6FH
	AHR   DB 2 DUP(0)
	AHR2  DB 2 DUP(0)
	AMIN  DB 2 DUP(0)
	AMIN2 DB 2 DUP(0)
	NUM   DB 31H,32H
	ALARMNUM DB 30H
	SNOOZE   DB ?
	SNODURATION DB 2 DUP(31H,31H)
		
;-----------TIMER	
	TIMER_LABEL DB 13,10,13,10,"================"
				DB 13,10,"     TIMER "
				DB 13,10, "================$"
	S1 			DB 13,10,13,10,"Enter the timer time in (HH:MM:SS) format: $"
	TIMERTIME 	DB 6 DUP(0)
	INVALID		DB 13,10,"Invalid Input!!!Please re-enter again!!! $"
	STOPTIMER   DB "Press (P) to pause the timer.$"
	S19 DB "Continue(C) or Quit(X) the timer countdown ?$"
	S20 DB "Press (S) to stop the timer alarm.$"
	S21 DB "Timer alarm is closed.$"
	S22 DB 13,10,13,10,"Would you like to continue for Timer?(Y = YES, N = NO): $"

;------------BEDTIME ANALYSIS
	BA DB 13,10,13,10,"================================"
	   DB 13,10,"         BEDTIME ANALYSIS "
	   DB 13,10, "================================$"
	SLP_TIME DB 13,10,"Your sleeping time in 24HRS format (XX:XX) : $"
	WU_TIME  DB 13,10,"Your wake up time in 24HRS format  (XX:XX) : $"
	SLP_HRS  DB 5 DUP(0)
	WU_HRS   DB 5 DUP(0)
	INV_MSG  DB 13,10,"Invalid Input!!!Please re-enter again!!! $"
	COUNT    DB 0
	SLPING_HRS DB 5 DUP(0)
	BA_MSG1    DB "Total Slept Hours : $"
	HOURS      DB " HOURS $"
	MINUTES    DB " MINUTES$"
	ASK_CONT3  DB 10,13,"Would you like to continue for Bedtime Analysis?(Y = YES, N = NO): $"
	ANS_CONT3  DB 1 DUP(?)
	
;---------------BEDTIME ANALYSIS MSG----------------
	GOOD DB 13,10,"Good Job!You have sufficient sleeping hours!Keep it up!$"
	BAD  DB 13,10,"Oh No!You have insufficient sleeping hours!Please rest more!"
		 DB 13,10,"You may maintain your sleeping hours between 7 to 9 hours daily!$"
	OVER DB 13,10,"Oops!You have exceeded the normal sleeping hours!Please take note!"
		 DB 13,10,"You may maintain your sleeping hours between 7 to 9 hours daily!$"
	WELL DB 13,10,"Your sleeping time is perfect!Great!$"
	ABN  DB 13,10,"Your sleeping time is abnormal! Try to adjust your sleeping time between"
		 DB 13,10,"21:00 and 23:00 daily!$"
	MIN  DB " Although you had meet the minimum sleeping hours.$"
	RMD  DB 10,13,"******Kindly Reminder******$"
	
;-----------WORLD CLOCK	
;------OPEN OPTIONS.TXT FILE-------
	FNAME  DB "OPTIONS.TXT",0
	HANDLE DW ?
	TEXT   DB 255 DUP(0)
	CHAR   DB ?

;------WCLOCK-----
	PROMPT1  DB 13,10,13,10,"Please enter your options(X:Back to Main Menu): $"
	U_CHOICE DB 1 DUP(?)
	INVALID_MSG DB 13,10,"Invalid input!!Please re-enter again!!$"
	W_TIME DB 10,13,"World Time  : $"
	TDY DB 10,13,"*******************TODAY****************** $"
	TMR DB 10,13,"*******************TOMORROW****************** $"
	YTD DB 10,13,"*******************YESTERDAY****************** $"
	ASK_CONT4 DB 10,13,"Would you like to continue for World Clock?(Y = YES, N = NO): $"
	ANS_CONT4 DB 1 DUP(?)

;------CURRENT TIME-------
	CUR_TIME DB 13,10,"Current Time: $"
	TEN  DB 10
	HRS  DB 2 DUP(0)
	MINS DB 2 DUP(0)
	
;----CHANGE ALARM SOUND	
	Q_NOTES DW	4560,3619,3416,3043,2711
	Q1_NOTES DW 4560,3619,3416,3043,2711
	Q2_NOTES DW	2415,2031,2280,3619,1521
	Q3_NOTES DW 8126,7670,5423,9121,2415
	CHGASOUND_LABEL DB 13,10,13,10,"==========================="
				DB 13,10,"     CHANGE ALARM SOUND "
				DB 13,10, "===========================$"
	S23 DB 10,13,10,13,"1. Soundtrack 1"
		DB 10,13,"2. Soundtrack 2"
		DB 10,13,"3. Soundtrack 3$"
	S24 DB 13,10,13,10,"Select No. of soundtrack to be played or (X) to back menu: $"
	S25 DB 13,10,"Select as alarm sound?(Y = YES, N = NO): $"
	S26 DB 13,10,"Alarm sound set successfully!$"
	S27 DB 13,10,13,10,"Would you like to continue to change alarm sounds?(Y = YES, N = NO): $"
	S28 DB 13,10,13,10,"Current soundtrack used = No. $"
	S29 DB 13,10,13,10,"Soundtrack is playing...$"
	ST_OPTION DB 31H
	CURRENTSOUND DB 31H
	
.CODE
	NEWLINE MACRO    ;NEW LINE
	MOV DL, 10       ;
	MOV AH, 02H      ;
	INT 21H          ;		 
	MOV DL, 13       ;
	MOV AH, 02H      ;                     
	INT 21H          ;
	ENDM             ;NEW LINE

MAIN PROC FAR
	MOV AX,@DATA
	MOV DS,AX
	
;----MAIN MENU
MAINMENU:
	;-CLEAR SCREEN
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	;SET CURSOR TO CENTER	
	MOV AH,02H					;REQUEST FOR SETTING
	MOV BH,00					;SET PAGE AS 0
	MOV DX,0000H				;SET ROW AS 0C,COLUMN AS 27
	INT 10H
	
	NEWLINE 
	
	MOV CX,50
	
PRINTLINE1:	
	
	MOV AH,02H
	MOV DL,"="
	INT 21H
	LOOP PRINTLINE1	

	MOV AH,09H
	LEA DX,M
	INT 21H
		
;-PRINT NEW LINE
	MOV AH,02H
	MOV DL,0DH
	INT 21H
	MOV DL,0AH
	INT 21H

	MOV CX,50
	
PRINTLINE2:	
	MOV AH,02H
	MOV DL,"="
	INT 21H
	LOOP PRINTLINE2

	CALL CURRENT_TIME

	NEWLINE

	MOV AH,09H
	LEA DX,M1
	INT 21H
	
INPUT:	
	MOV AH,01H
	INT 21H
	
	MOV MOPTION,AL
	
	CMP MOPTION,31H
	JE  JMPONE
	CMP MOPTION,32H
	JE  JMPTWO
	CMP MOPTION,33H
	JE  JMPTHREE
	CMP MOPTION,34H
	JE  JMPFOUR
	CMP MOPTION,35H
	JE  JMPFIVE
	CMP MOPTION,36H
	JE  JMPSIX
	
	MOV AH,09H
	LEA DX,M2
	INT 21H
	JMP INPUT
	
JMPONE: JMP ONE
JMPTWO: JMP TWO
JMPTHREE: JMP THREE
JMPFOUR: JMP FOUR
JMPFIVE: JMP FIVE
JMPSIX: JMP EXIT
	
;----ALARM FUNCTION		
ONE:	
DISPLAYTIME:
	MOV AH,09H
	LEA DX,ALM
	INT 21H
	
	CALL CURRENT_TIME	
;------------------------------------------------
DCURRENTALARM:	
	CMP ALARMNUM,30H	;IF CURRENTLY NO ALARM,DIRECT PROCEED TO ADD ALARM
	JE  GOCURRENTALARM
	JMP ALARMSETMSG
			            ;DISPLAY THE CURRENT ALARM SET
		
GOCURRENTALARM: JMP CURRENTALARM	
	
FIRSTALARM:	
	MOV DI,0			;IF FIRST ALARM INPUT
	JMP ALARMINPUT
	
SECONDALARM:
	MOV DI,1		; IF SECOND ALARM INPUT
	
ALARMINPUT:
	INC ALARMNUM	;INC THE ALARM NUMBER

;----ACCEPT ALARM INPUT	
ALARMINPUT2:	
	MOV AH,09H
	LEA DX,S5
	INT 21H
	
	MOV AH,01H
	INT 21H
	MOV AHR[DI],AL
	
	MOV AH,01H
	INT 21H
	MOV AHR2[DI],AL
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
	
	MOV AH,01H
	INT 21H
	MOV AMIN[DI],AL
	
	MOV AH,01H
	INT 21H
	MOV AMIN2[DI],AL
	
;----CHECK VALIDITY
	CMP AHR[DI],33H
	JAE ALARMINVALID		;FIRST HOUR DIGIT (1-2)
	CMP AHR[DI],2FH
	JBE ALARMINVALID
	
	CMP AHR2[DI],2FH
	JBE ALARMINVALID		;SECOND HOUR DIGIT(1-9)
	CMP AHR[DI],32H			;IF FIRST HOUR DIGIT = 2 ,SEC DIGIT(CANNOT>3)
	JE  A_CHK1
	
	CMP AHR2[DI],3AH
	JAE ALARMINVALID
	JMP A_CHK2

A_CHK1:	
	CMP AHR2[DI],34H		;IF FIRST HOUR DIGIT = 2 ,SEC DIGIT(CANNOT>3)
	JAE ALARMINVALID
	
A_CHK2:	
	CMP AMIN[DI],36H
	JAE ALARMINVALID		;FIRST MIN DIGIT(0-5)
	CMP AMIN[DI],2FH
	JBE ALARMINVALID
	
	CMP AMIN2[DI],3AH
	JAE ALARMINVALID		;SEC MIN DIGIT(0-9)
	CMP AMIN2[DI],2FH
	JBE ALARMINVALID
	
	JMP ALARMVALID

ALARMINVALID:
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP ALARMINPUT2

ALARMVALID:		
	MOV AH,09H
	LEA DX,S6		;ALARM SET SUCCESSFULLY MSG
	INT 21H
	
ASKSNOOZE:		
	MOV AH,09H
	LEA DX,S7		;ASK WHETHER WANT TO CHG SNOOZE DURATION
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"Y"
	JE  WANCHG
	CMP AL,"y"
	JE  WANCHG
	CMP AL,"N"
	JE CHKALARMFULL
	CMP AL,"n"
	JE CHKALARMFULL
		
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	JMP ASKSNOOZE
	
WANCHG:
	MOV AH,09H
	LEA DX,S8			;ASK WANT TO CHG THE SNOOZE DURATION TO HOW MANY MINS
	INT 21H
	
	MOV AH,01H
	INT 21H
	MOV SNODURATION[DI],AL
	
	CMP SNODURATION[DI],30H
	JBE INVALID2
	CMP SNODURATION[DI],3AH
	JAE INVALID2
	JMP CHKALARMFULL
	
INVALID2:
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	JMP WANCHG

CHKALARMFULL:	
	CMP ALARMNUM,32H
	JE  ALARMSETMSG		;IF TWO ALARM ALR SET,PROCEED TO NEXT STEP 
	
ADDSECALARM:			;IF ONLY ONE ALARM SET,ASK WANT TO CONTINUE ADD ALARM
	MOV AH,09H
	LEA DX,S13
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"y"
	JE JMPSEC
	CMP AL,"Y"
	JE JMPSEC
		
	CMP AL,"N"
	JE  ALARMSETMSG
	CMP AL,"n"
	JE  ALARMSETMSG
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	JMP ADDSECALARM
		
JMPSEC: JMP SECONDALARM	

ALARMSETMSG:	
	MOV AH,09H
	LEA DX,S9
	INT 21H
	
ALARMRTIME:	
	MOV SI,0
	CMP ALARMNUM,32H		; IF ALARMNUM=32, MEANS GOT TWO ALARM
	JE  TWOALARM				
	
ONEALARM:
	MOV CX,1				;ONE ALARM LOOP ONE TIME
	JMP DISPLAYATIME

TWOALARM:
	MOV CX,2				;TWO ALARM LOOP TWO TIMES
		
DISPLAYATIME:	
	NEWLINE
	
	MOV AH,02H
	MOV DL,NUM[SI]
	INT 21H
	
	MOV AH,09H
	LEA DX,S12
	INT 21H
	
	MOV AH,02H
	MOV DL,AHR[SI]
	INT 21H
	
	MOV AH,02H
	MOV DL,AHR2[SI]
	INT 21H
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
	
	MOV AH,02H
	MOV DL,AMIN[SI]
	INT 21H
	
	MOV AH,02H
	MOV DL,AMIN2[SI]
	INT 21H
	
	INC SI
	LOOP DISPLAYATIME
		
ALARMWORKING:	
	MOV AH,09H
	LEA DX,S14
	INT 21H

	MOV DI,0
	
CHKTIME:
	MOV AH,01H
	INT 16H				;CHECK IF A KEY IS PRESSED
	JZ  CONTINUECHK		;IF NOT,CONTINUE CHK
	
	MOV AH,00H
	INT 16H
	
	CMP AL,"A"
	JE  MODIFYALARM		;IF "A" IS PRESSED, GO TO MODIFY ALARM
	CMP AL,"a"
	JE  MODIFYALARM
	
	CMP AL,"X"
	JE  JMPEXIT			;IF "X" IS PRESSED, BACK TO MENU
	CMP AL,"x"
	JE  JMPEXIT
	
	JMP CONTINUECHK
		
JMPEXIT:	JMP MAINMENU

CONTINUECHK:	
	MOV AH,2CH  ; GET CURRENT TIME IN DECIMAL
	INT 21H
	
	MOV AX,0	; CLEAR AX	
	MOV AL,CH	;CH-HOUR
	
	DIV TEN
	ADD AL,30H
	CMP AHR[DI],AL		;CHK FIRST HOUR DIGIT
	JE  CHKHR1
	JMP CHKALARMNUM

CHKHR1:	
	ADD AH,30H
	CMP AHR2[DI],AH		;CHK SEC HOUR DIGIT
	JE  CHKMIN1
	JMP CHKALARMNUM

CHKMIN1:	
;MINITES PART	
	MOV AX,0
	MOV AL,CL  ; DH-SECONDS, CL-MINS, CH-HOUR
	DIV TEN	
	ADD AL,30H
	CMP AMIN[DI],AL			;CHK FIRST MIN FIGIT
	JE  CHKMIN2
	JMP CHKALARMNUM
	
CHKMIN2:	
	ADD AH,30H
	CMP AMIN2[DI],AH		;CHK SECOND MIN FIGIT
	JE  JMPALARM
	JMP CHKALARMNUM

JMPALARM: JMP ALARM

CHKALARMNUM:
	CMP ALARMNUM,31H		;IF ONLY ONE ALARM,NO NEED CHG DI
	JE  CHKTIME
	CMP DI,0				;IF TWO ALARM,CHG DI
	JE  ADDNUM
	DEC DI
	JMP CHKTIME
	
ADDNUM:
	INC DI
	JMP CHKTIME
	
	JMP ALARM
	
MODIFYALARM:	
	CMP ALARMNUM,31H	;IF ONLY ONE ALARM SET, ALLOW ADD AND DELTE
	JE  ADDORDELETE
	CMP ALARMNUM,32H
	JE  DELETEORNOT		;IF TWO ALARM SET, ONLY ALLOW DELTE

ADDORDELETE:
	MOV AH,09H
	LEA DX,S18			;ADD,DELETE,OR PROCEED MSG
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"A"
	JE  JMPADDALARMORNOT
	CMP AL,"a"
	JE  JMPADDALARMORNOT
	
	CMP AL,"D"
	JE  ASKDELETE
	CMP AL,"d"
	JE  ASKDELETE
	
	CMP AL,"P"
	JE  JMPALARMWORKING
	CMP AL,"p"
	JE  JMPALARMWORKING
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP ADDORDELETE
	
JMPADDALARMORNOT: JMP ADDALARMORNOT

DELETEORNOT:
	MOV AH,09H
	LEA DX,S16
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"P"
	JE  JMPALARMWORKING
	CMP AL,"p"
	JE  JMPALARMWORKING
	
	CMP AL,"D"
	JE  ASKDELETE
	CMP AL,"d"
	JE  ASKDELETE
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP DELETEORNOT
	
JMPALARMWORKING: JMP ALARMSETMSG	
	
ASKDELETE:
	MOV AH,09H
	LEA DX,S17
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"X"
	JE  JMPALARMWORKING
	CMP AL,"x"
	JE  JMPALARMWORKING
		
	CMP ALARMNUM,31H	;IF ONLY ONE ALARM SET, ONLY CAN ENTER 1
	JE  ONEOPTION
	CMP ALARMNUM,32H		;IF ONLY ONE ALARM SET, CAN ENTER 1&2
	JE  TWOOPTION	
	
ONEOPTION:
	MOV DI,0
	CMP AL,31H
	JE  JMPCURRENTALARM
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP ASKDELETE

TWOOPTION:
	CMP AL,31H
	JE  SETDI0		;IF DELETE FIRST ALARM,SET DI TO 0
	CMP AL,32H
	JE  SETDI1		;IF DELETE SECOND ALARM,SET DI TO 1
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP ASKDELETE

SETDI0:
	MOV DI,0
	JMP JMPCURRENTALARM	
	
SETDI1:
	MOV DI,1
	JMP JMPCURRENTALARM	

JMPCURRENTALARM: 
	DEC ALARMNUM
	JMP CURRENTALARM	

ADDALARMORNOT: 
	MOV DI,1
	JMP ADDALARM	
		
ALARM:	
	MOV SI,0
SOUND:	
;-CLEAR SCREEN				;REQUEST FOR SCREEN CLEANING, 
	MOV AX,0600H				; AH-06H->SCROLL UP REQUEST, AL-00H->FULL SCREEN SCROLL
	MOV BH,COLOR[SI]			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H				;FROM WHR, CH-ROW,CL-COLUMN
	MOV DX,184FH				;TO WHR
	INT 10H						;CALL INT SERVICE
	
	;SET CURSOR TO CENTER	
	MOV AH,02H					;REQUEST FOR SETTING
	MOV BH,00					;SET PAGE AS 0
	MOV DX,0B13H				;SET ROW AS 0C,COLUMN AS 27
	INT 10H
	
	MOV AH,02H
	MOV DL,AHR[DI]
	INT 21H
	
	MOV AH,02H
	MOV DL,AHR2[DI]
	INT 21H
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
	
	MOV AH,02H
	MOV DL,AMIN[DI]
	INT 21H
	
	MOV AH,02H
	MOV DL,AMIN2[DI]
	INT 21H
	
	MOV AH,09H
	LEA DX,S30
	INT 21H
	
	MOV AH,02H					;REQUEST FOR SETTING
	MOV BH,00					;SET PAGE AS 0
	MOV DX,0C13H				;SET ROW AS 0C,COLUMN AS 27
	INT 10H
	
;PRINT STOP OR SNOOZE MESSAGE
	MOV AH,09H
	LEA DX,S3
	INT 21H
	
	MOV AL,182		; set up speaker by sending the value 182
	OUT 43H,AL		; to port 43h
	MOV AX,NOTES[SI];frequency number(in dec)
	
	OUT 42H,AL
	MOV AL,AH
	OUT 42H,AL
	IN AL,61H
	
	OR AL,00000011B
	OUT 61H,AL
	MOV CX,10		;control duaration of sound
	
STOP1:
	MOV BX,65535	; produce one sound

STOP2:
	DEC BX
	JNE STOP2		; continue jmp when BX is not zero
	DEC CX
	JNE STOP1
			
;-CLEAR SCREEN
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	
	INC SI
	CMP SI,5
	JNE NORESETSI

	MOV SI,0
	
NORESETSI:	
	MOV AH,01H
	INT 16H			;CHECK IF A KEY IS PRESSED
	JZ  JMPSOUND
	
	IN AL,61H
	
	AND AL,11111100B
	OUT 61H,AL
	
	MOV AH,00H
	INT 16H
		
	CMP AL,"Y"
	JE  JMPSNOOZE		
	CMP AL,"y"
	JE  JMPSNOOZE
	CMP AL,"S"
	JE  ALARMSTOP
	CMP AL,"s"
	JE  ALARMSTOP
		
JMPSNOOZE: JMP SNOOZEALARM1
JMPSOUND:JMP SOUND

ALARMSTOP:	
;-CLEAR SCREEN
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
;SET CURSOR TO CENTER	
	MOV AH,02H					;REQUEST FOR SETTING
	MOV BH,00					;SET PAGE AS 0
	MOV DX,0C21H				;SET ROW AS 0C,COLUMN AS 27
	INT 10H
	
	MOV AH,09H
	LEA DX,S4
	INT 21H
	
	DEC ALARMNUM
	
ASKADD:	
	CMP ALARMNUM,32H
	JE  GOALARMWORK				;ASK WANT TO ADD ALARM OR NOT
	MOV AH,09H
	LEA DX,S13
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"N"
	JE  CURRENTALARM
	CMP AL,"n"
	JE  CURRENTALARM
	
	CMP AL,"Y"
	JE  ADDALARM
	CMP AL,"y"
	JE  ADDALARM
	
	JMP INVALID4
GOALARMWORK: JMP ALARMWORKING

CURRENTALARM:	
	CMP ALARMNUM,30H		;IF ALARMNUM=30H,MEANS NO ALARM CURRENTLY
	JE  NOALARM	
	
	CMP DI,0
	JE  DELETE	
	DEC DI
	MOV SNODURATION[1],31H;DELETE SECOND ALARM
	JMP ALARMSETMSG	

NOALARM:
	MOV SNODURATION[0],31H
	MOV AH,09H
	LEA DX,S15
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"X"
	JE  QUIT
	CMP AL,"x"
	JE  QUIT
	
	CMP AL,"A"
	JE  JMPFIRSTALARM
	CMP AL,"a"
	JE  JMPFIRSTALARM
		
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	JMP NOALARM
		
INVALID4:
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	JMP ASKADD
		
QUIT: JMP MAINMENU	
JMPONEALARM: JMP ALARMRTIME	
	
DELETE:		
	CALL MOVALR2TO1
	
	JMP ALARMSETMSG

ADDALARM:
	CMP ALARMNUM,30H
	JE  JMPFIRSTALARM
	CMP DI,0
	JE  MOVEALARM
	JMP SECONDALARM
	
JMPFIRSTALARM: JMP FIRSTALARM

MOVEALARM:
	CALL MOVALR2TO1
	
	JMP SECONDALARM
			
SNOOZEALARM1:
	MOV SI,DI
	MOV AH,2CH  ; GET CURRENT TIME IN DECIMAL
	INT 21H
	
	MOV AX,0	; CLEAR AX
	MOV AL,CL  ; DH-SECONDS, CL-MINS, CH-HOUR
		
	DIV TEN
	MOV AMIN[DI],AL
	MOV AMIN2[DI],AH	;MOVE CURRENT TIME TO ALARM
	
	ADD AMIN[DI],30H
	ADD AMIN2[DI],30H

	MOV AX,0
	MOV AL,CH
	
	DIV TEN
	MOV AHR[DI],AL
	MOV AHR2[DI],AH
	
	ADD AHR[DI],30H
	ADD AHR2[DI],30H
	
	MOV AH,09H
	LEA DX,S10
	INT 21H
	
	MOV AH,02H
	MOV DL,SNODURATION[DI]			;DISPLAY MSG SNOOZE FOR HOW MANY MINS
	INT 21H
	
	MOV AH,09H
	LEA DX,S11
	INT 21H
	
	MOV AL,SNODURATION[DI]
	SUB AL,30H
	
	MOV SI,0				;RESET SI
	ADD AMIN2[DI],AL		;SNOOZE FOR HOW MANY MINS
	CMP AMIN2[DI],39H
	JA  RESETMIN1			;IF SEC DIGIT MORE THAN 9,RESET IT AND ADD TO
	JMP ALARMSETMSG			;FIRST DIGIT OF MINIT
	
RESETMIN1:
	INC AMIN[DI]
	SUB AMIN2[DI],0AH
	CMP AMIN[DI],35H
	JA  RESETHR
	JMP ALARMSETMSG
	
RESETHR:
	INC AHR2[DI]
	SUB AMIN[DI],6H
	CMP AHR[DI],32H		;IF AHR[0]=2, HR[1]CAN ONLY ADD TILL 3 23:59
	JE  OTHERRESET
	CMP AHR2[DI],39H
	JA  RESETHR1
	JMP ALARMSETMSG
	
RESETHR1:
	INC AHR[DI]
	SUB AHR2[DI],0AH
	JMP ALARMSETMSG
	
OTHERRESET:
	CMP AHR2[DI],33H
	JA RESET
	JMP ALARMSETMSG
	
RESET:
	MOV AHR[DI],30H
	MOV AHR2[DI],30H
	JMP ALARMSETMSG

;--------TIMER FUNCTION			
TWO:	

TIMERINPUT:
	MOV AH,09H
	LEA DX,TIMER_LABEL
	INT 21H

	MOV AH,09H
	LEA DX,S1			;-RECEIVE USER TIMER INPUT
	INT 21H
;----HH	
	MOV AH,01H
	INT 21H
	
	MOV TIMERTIME[0],AL
	
	MOV AH,01H
	INT 21H
	
	MOV TIMERTIME[1],AL
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
;----MM	
	MOV AH,01H
	INT 21H
	
	MOV TIMERTIME[2],AL
	
	MOV AH,01H
	INT 21H
	
	MOV TIMERTIME[3],AL
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
;----SS	
	MOV AH,01H
	INT 21H
	
	MOV TIMERTIME[4],AL
	
	MOV AH,01H
	INT 21H
	
	MOV TIMERTIME[5],AL
	
;----CHECK VALIDITY
	CMP TIMERTIME[0],33H
	JAE INVALIDMSG
	CMP TIMERTIME[0],2FH
	JBE INVALIDMSG
	
	CMP TIMERTIME[1],2FH
	JBE INVALIDMSG
	CMP TIMERTIME[0],32H
	JE  T_CHK1
	
	CMP TIMERTIME[1],3AH
	JAE INVALIDMSG	
	JMP T_CHK2
	
T_CHK1:
	CMP TIMERTIME[1],34H
	JAE INVALIDMSG
	
T_CHK2:	
	CMP TIMERTIME[2],36H
	JAE INVALIDMSG
	CMP TIMERTIME[2],2FH
	JBE INVALIDMSG
	
	CMP TIMERTIME[3],3AH
	JAE INVALIDMSG
	CMP TIMERTIME[3],2FH
	JBE INVALIDMSG
	
	CMP TIMERTIME[4],36H
	JAE INVALIDMSG
	CMP TIMERTIME[4],2FH
	JBE INVALIDMSG
	
	CMP TIMERTIME[5],3AH
	JAE INVALIDMSG
	CMP TIMERTIME[5],2FH
	JBE INVALIDMSG
	
;--IF VALID INPUT	
	JMP TIMER
	
INVALIDMSG:
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP TIMERINPUT
	
;-----TIMER COUNTDAOWN START
TIMER:
	MOV BL,30H			;SET BL TO 0
	
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	
GETTIME:
;SET CURSOR 
	MOV AH,02H
	MOV BH,00			
	MOV DX,0E19H
	INT 10H
	
	MOV AH,09H
	LEA DX,STOPTIMER
	INT 21H
	
	MOV AH,2CH
	INT 21H
	MOV BH,DH  ; DH has current second
	
	MOV AH,01H
	INT 16H			;CHECK IF A KEY IS PRESSED
	JZ  GETSEC		;IF NO,CONTINUE COUNTDOWN
	
	MOV AH,00H
	INT 16H
	
	CMP AL,"P"
	JE  STOP		;IF "S" IS PRESSED,STOP COUNTDOWN
	CMP AL,"p"
	JE  STOP
	
	JMP GETSEC
	
STOP:	
	NEWLINE
	NEWLINE
	
	MOV AH,09H
	LEA DX,S19		;ASK CONTINUE OR QUIT COUNTDOWN
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"X"
	JE  GOMENU
	CMP AL,"x"
	JE  GOMENU
	
	CMP AL,"C"
	JE  GETTIME
	CMP AL,"c"
	JE  GETTIME
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP STOP
	
GOMENU: JMP ASKNXTTIMER	
	
GETSEC:      ;Loops until the current second is not equal to the last, in BH
	MOV AH,2CH
	INT 21H
	CMP BH,DH 	 ;TO LET THE NUMBER CHG EVERY SEC BUT NOT AT THE SAME TIME
	JNE LOOPSEC1
	JMP GETSEC
	
LOOPSEC1:
;-CLEAR SCREEN
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
;SET CURSOR TO CENTER	
	MOV AH,02H
	MOV BH,00			
	MOV DX,0C27H
	INT 10H
	
	MOV AH,02H
	MOV DL,TIMERTIME[0]
	INT 21H
	
	MOV AH,02H
	MOV DL,TIMERTIME[1]
	INT 21H
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
	
	MOV AH,02H
	MOV DL,TIMERTIME[2]
	INT 21H
	
	MOV AH,02H
	MOV DL,TIMERTIME[3]
	INT 21H
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
	
	MOV AH,02H
	MOV DL,TIMERTIME[4]
	INT 21H
	
	MOV AH,02H
	MOV DL,TIMERTIME[5]
	INT 21H
		
	CMP BL,TIMERTIME[5]
	JE  LOOPSECOND2			;IF LAST MIN DIGIT IS 0,GO CHK FIRST MIN DIGIT
	SUB TIMERTIME[5],1H		;IF NOT 0,MINUS 1
	JMP GETTIME	
	
LOOPSECOND2:
	CMP BL,TIMERTIME[4]		;IF FIRST MIN DIGIT IS 0,GO CHK SEC HOUR DIGIT
	JE  LOOPMIN1
	SUB TIMERTIME[4],1H		;IF NOT 0,FIRST MIN MINUS 1, 
	ADD TIMERTIME[5],9H		;RESET LAST MIN
	JMP GETTIME
 
LOOPMIN1:
	CMP BL,TIMERTIME[3]
	JE  LOOPMIN2
	SUB TIMERTIME[3],1H
	ADD TIMERTIME[4],5H
	ADD TIMERTIME[5],9H
	JMP GETTIME

LOOPMIN2:
	CMP BL,TIMERTIME[2]
	JE  LOOPHR1
	SUB TIMERTIME[2],1H
	ADD TIMERTIME[3],9H
	ADD TIMERTIME[4],5H
	ADD TIMERTIME[5],9H
	JMP GETTIME

LOOPHR1:
	CMP BL,TIMERTIME[1]
	JE  LOOPHR2
	SUB TIMERTIME[1],1H
	ADD TIMERTIME[2],5H
	ADD TIMERTIME[3],9H
	ADD TIMERTIME[4],5H
	ADD TIMERTIME[5],9H
	JMP GETTIME

LOOPHR2:
	CMP BL,TIMERTIME[0]
	JE  JMPQUIT
	SUB TIMERTIME[0],1H
	ADD TIMERTIME[1],9H
	ADD TIMERTIME[2],5H
	ADD TIMERTIME[3],9H
	ADD TIMERTIME[4],5H
	ADD TIMERTIME[5],9H
	JMP GETTIME

JMPQUIT:	
	MOV SI,0
TSOUND:	
;-CLEAR SCREEN				;REQUEST FOR SCREEN CLEANING, 
	MOV AX,0600H				; AH-06H->SCROLL UP REQUEST, AL-00H->FULL SCREEN SCROLL
	MOV BH,COLOR[SI]			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H				;FROM WHR, CH-ROW,CL-COLUMN
	MOV DX,184FH				;TO WHR
	INT 10H						;CALL INT SERVICE
	
	;SET CURSOR TO CENTER	
	MOV AH,02H					;REQUEST FOR SETTING
	MOV BH,00					;SET PAGE AS 0
	MOV DX,0C13H				;SET ROW AS 0C,COLUMN AS 27
	INT 10H
	
;PRINT STOP OR SNOOZE MESSAGE
	MOV AH,09H
	LEA DX,S20
	INT 21H
	
	MOV AL,182		; set up speaker by sendind the value 182
	OUT 43H,AL		; to port 43h
	MOV AX,NOTES[SI];frequency number(in dec)
	
	OUT 42H,AL
	MOV AL,AH
	OUT 42H,AL
	IN AL,61H
	
	OR AL,00000011B
	OUT 61H,AL
	MOV CX,10		;control duaration of sound
	
TSTOP1:
	MOV BX,65535	; produce one sound

TSTOP2:
	DEC BX
	JNE TSTOP2		; continue jmp when BX is not zero
	DEC CX
	JNE TSTOP1
			
;-CLEAR SCREEN
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	
	INC SI
	CMP SI,5
	JNE TNORESETSI

	MOV SI,0
	
TNORESETSI:	
	MOV AH,01H
	INT 16H			;CHECK IF A KEY IS PRESSED
	JZ  TSOUND
		
	MOV AH,00H
	INT 16H
		
	CMP AL,"S"
	JE  TIMERSTOP
	CMP AL,"s"
	JE  TIMERSTOP
	
	JMP TSOUND
		
TIMERSTOP:
	IN AL,61H
	
	AND AL,11111100B
	OUT 61H,AL
	
	;-CLEAR SCREEN
	MOV AX,0600H
	MOV BH,07H			;FIRST DIGIT-BACKGROUND COLOR, SEC DIGIT-WORDS COLOR
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
;SET CURSOR TO CENTER	
	MOV AH,02H					;REQUEST FOR SETTING
	MOV BH,00					;SET PAGE AS 0
	MOV DX,0C19H				;SET ROW AS 0C,COLUMN AS 27
	INT 10H
		
	MOV AH,09H
	LEA DX,S21
	INT 21H
	
ASKNXTTIMER:	
	MOV AH,09H
	LEA DX,S22		;ASK WANT TO CONTINUE SET TIMER OR NOT
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"Y"
	JE  JMPSTART
	CMP AL,"y"
	JE  JMPSTART
	CMP AL,"N"
	JE  JMPMENU
	CMP AL,"n"
	JE  JMPMENU
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP ASKNXTTIMER
	
JMPMENU: JMP MAINMENU
JMPSTART: JMP TIMERINPUT

;----BEDTIME ANALYSIS FUNCTION
THREE:
BA_START:
		MOV AH,09H				
		LEA DX,BA
		INT 21H
		
		NEWLINE
		
		MOV AH,09H
		LEA DX,SLP_TIME			;PROMPT MSG TO LET USER KEY IN SLEEPING TIME
		INT 21H
		
		MOV AH,01H
		INT 21H
		MOV SLP_HRS[0],AL
		
		MOV AH,01H
		INT 21H
		MOV SLP_HRS[1],AL
		
		MOV AH,02H
		MOV DL,":"
		INT 21H
		
		MOV AH,01H
		INT 21H
		MOV SLP_HRS[3],AL
		
		MOV AH,01H
		INT 21H
		MOV SLP_HRS[4],AL
		
		JMP CHK_SLPTIME1

BA_CONT1:	
		MOV AH,09H
		LEA DX,WU_TIME		;PROMPT MSG TO LET USER KEY IN WAKE UP TIME
		INT 21H
		
		MOV AH,01H
		INT 21H
		MOV WU_HRS[0],AL
		
		MOV AH,01H
		INT 21H
		MOV WU_HRS[1],AL
		
		MOV AH,02H
		MOV DL,":"
		INT 21H
		
		MOV AH,01H
		INT 21H
		MOV WU_HRS[3],AL
		
		MOV AH,01H
		INT 21H
		MOV WU_HRS[4],AL
		
		JMP CHK_WUTIME1
		
BA_CONT2:
		MOV CX,5
		MOV SI,0
		
LA:
		MOV BL,WU_HRS[SI]			;CALCULATION FOR SLEEPING HOURS
		MOV SLPING_HRS[SI],BL
		SUB SLPING_HRS[SI],30H
		INC SI
		LOOP LA
		
		MOV CX,5
		MOV SI,0
		
LB:		
		CMP SI,2
		JE SKIP
		MOV BL,SLP_HRS[SI]
		SUB BL,30H
		SUB SLPING_HRS[SI],BL
		ADD SLPING_HRS[SI],30H
		
SKIP:
		INC SI
		LOOP LB

CHK_1:
		CMP SLPING_HRS[4],30H		;VALIDATION FOR CALCULATED SLEEPING HOURS
		JAE CHK_2
		SUB SLPING_HRS[3],01H
		ADD SLPING_HRS[4],0AH
		
CHK_2:
		CMP SLPING_HRS[3],30H
		JAE CHK_3
		SUB SLPING_HRS[1],01H
		ADD SLPING_HRS[3],06H
		
CHK_3:		
		CMP SLPING_HRS[1],30H
		JAE CHK_4
		SUB SLPING_HRS[0],01H
		ADD SLPING_HRS[1],0AH
		
CHK_4:		
		CMP SLPING_HRS[0],30H
		JAE CHK_5
		ADD SLPING_HRS[0],02H
		ADD SLPING_HRS[1],04H
		
CHK_5:
		CMP SLPING_HRS[4],39H
		JBE CHK_6
		ADD SLPING_HRS[3],01H
		SUB SLPING_HRS[4],0AH

CHK_6:
		CMP SLPING_HRS[3],35H
		JBE CHK_7
		ADD SLPING_HRS[1],01H
		SUB SLPING_HRS[3],06H
		
CHK_7:
		CMP SLPING_HRS[1],39H
		JBE DISPLAY
		ADD SLPING_HRS[0],01H
		SUB SLPING_HRS[1],0AH
		JMP CHK_1
				
DISPLAY:
		NEWLINE
		NEWLINE
		
		MOV AH,09H
		LEA DX,BA_MSG1			;DISPLAY TOTAL SLEEPING HOURS
		INT 21H
		
		MOV AH,02H
		MOV DL,SLPING_HRS[0]
		INT 21H
		
		MOV AH,02H
		MOV DL,SLPING_HRS[1]
		INT 21H
		
		MOV AH,09H
		LEA DX,HOURS
		INT 21H
		
		MOV AH,02H
		MOV DL,SLPING_HRS[3]
		INT 21H
		
		MOV AH,02H
		MOV DL,SLPING_HRS[4]
		INT 21H
		
		MOV AH,09H
		LEA DX,MINUTES
		INT 21H
		
		NEWLINE 
		
		MOV AH,09H
		LEA DX,RMD
		INT 21H
		
		JMP ANA1
		
ANA1:
		CMP SLP_HRS[0],32H			;START COMPARING USER SLEEP TIME
		JE ANA1_1					;AND DISPLAY BA1 MSG
		JB ANA1_3					;FOR DIFFERENT TYPES OF CONDITION
		
ANA1_1:		
		CMP SLP_HRS[1],31H		;CHK USER WHETHER SLEEP BETWEEN 21:00~23:00
		JAE ANA1_2
		JB ANA1_MSG_2
		
ANA1_2:		
		CMP SLP_HRS[1],33H
		JBE ANA1_MSG_1
		
ANA1_MSG_1:
		MOV AH,09H
		LEA DX,WELL		;SLP BTW 21:00~23:00,DISPLAY MSG
		INT 21H
		
		JMP ANA2
		
ANA1_3:		
		CMP SLP_HRS[0],30H
		JE ANA1_4			;CHK USER WHETHER SLP TOO EARLY(07:00~20:00)
		JA ANA1_MSG_2
		
		JMP ANA1_MSG_2
		
ANA1_4:
		CMP SLP_HRS[1],36H	;CHK USER WHETHER LATE TO SLP(00:00~06:00)
		JBE ANA1_5
		JA ANA1_MSG_2
		
ANA1_5:		
		CMP SLP_HRS[1],30H
		JAE ANA1_MSG_3
		
ANA1_MSG_2:
		MOV AH,09H
		LEA DX,ABN		;SLP BTW 07:00~20:00,DISPLAY MSG
		INT 21H
		
		JMP ANA2
		
ANA1_MSG_3:
		MOV AH,09H
		LEA DX,ABN	;SLP BTW 00:00~06:00,DISPLAY MSG
		INT 21H
		
		JMP ANA2
		
ANA2:
		CMP SLPING_HRS[0],30H	;START COMPARING USER SLEEPING HOURS
		JE ANA2_1				; AND DISPLAY BA2 MSG
	
ANA2_MSG_1:	
		MOV AH,09H
		LEA DX,OVER				;IF >10 HRS,DISPLAY OVER MSG
		INT 21H
		
		JMP CONT_ASK3
		
ANA2_1:		
		CMP SLPING_HRS[1],37H	;IF BETWEEN 7 ~ 9 HRS
		JAE ANA2_3
		
ANA2_MSG_2:
		MOV AH,09H
		LEA DX,BAD				;IF < 7 HRS,DISPLAY INSUFFICIENT MSG
		INT 21H
		
		JMP CONT_ASK3
		
ANA2_3:
		CMP SLPING_HRS[1],39H	;IF BETWEEN 7 ~ 9 HRS
		JBE ANA2_4
		
ANA2_4:
		CMP SLP_HRS[0],32H		;IF BETWEEN 7 ~ 9 HRS,CHK WHETHER 
		JE ANA2_5				;SLEEPING TIME MEET 21:00~23:00
		
		MOV AH,09H
		LEA DX,MIN
		INT 21H	
		
		JMP CONT_ASK3
		
ANA2_5:
		CMP SLP_HRS[1],31H
		JAE ANA2_6
		
		MOV AH,09H
		LEA DX,MIN
		INT 21H	
		
		JMP CONT_ASK3
		
ANA2_6:
		CMP SLP_HRS[1],33H
		JBE ANA2_MSG_3
		
		MOV AH,09H
		LEA DX,MIN
		INT 21H
		
		JMP CONT_ASK3
		
ANA2_MSG_3:
		MOV AH,09H			;IF BETWEEN 7 ~ 9 HRS,SLP TIME = 21:00~23:00
		LEA DX,GOOD			;DISPLAY GOOD MSG
		INT 21H

		JMP CONT_ASK3
		
INVALID_INPUT:		
		MOV AH,09H
		LEA DX,INV_MSG
		INT 21H
		
		MOV AX,0

		JMP BA_START
		
GO_CHK_HRS1A:
		JMP CHK_HRS1A
		
CHK_SLPTIME1:
		CMP SLP_HRS[0],32H			;VALIDATION FOR SLEEP TIME
		JA GO_INVALID_1				;HRS[0] > 2,SHOW INVALID
		JE GO_CHK_HRS1A
		
CHK_SLPTIME2:	
		MOV SI,0
		MOV CX,2

L1:		
		CMP SLP_HRS[SI],30H			;CHK BOTH HRS ONLY CAN BE NUMERICAL VALUE
		JB GO_INVALID_1				;0~9
		
		CMP SLP_HRS[SI],39H
		JA GO_INVALID_1
		
		INC SI
		LOOP L1
		
		JMP CHK_SLPTIME3
		
CHK_SLPTIME3:	
		CMP SLP_HRS[3],35H		;CHK HRS[3]<MINS> WITHIN 0~5
		JA GO_INVALID_1
		
		CMP SLP_HRS[3],30H
		JB GO_INVALID_1
		
		JMP CHK_SLPTIME4
				
CHK_SLPTIME4:
		CMP SLP_HRS[4],30H		;CHK HRS[4]<MINS> WITHIN 0~9
		JB GO_INVALID_1	
		
		CMP SLP_HRS[4],39H
		JA GO_INVALID_1
		
		JMP BA_CONT1
		
GO_INVALID_1:
		JMP INVALID_INPUT
	
CHK_WUTIME1:					;VALIDATION FOR WAKE UP TIME
		CMP WU_HRS[0],32H	
		JA GO_INVALID_2			;HRS[0] > 2,SHOW INVALID
		JE CHK_HRS1B

CHK_WUTIME2:	
		MOV AL,SLP_HRS[0]
		CMP WU_HRS[0],AL
		JE CHK_EQUAL_1
		
CHK_WUTIME3:
		MOV SI,0
		MOV CX,2

L2:		
		CMP WU_HRS[SI],30H		;CHK BOTH HRS ONLY CAN BE NUMERICAL VALUE
		JB GO_INVALID_2			;0~9
		
		CMP WU_HRS[SI],39H
		JA GO_INVALID_2
		
		INC SI
		LOOP L2

		JMP CHK_WUTIME4

CHK_WUTIME4:
		CMP WU_HRS[3],35H		;CHK HRS[3]<MINS> WITHIN 0~5
		JA GO_INVALID_2
		
		CMP WU_HRS[3],30H
		JB GO_INVALID_2
		
		JMP CHK_WUTIME5
		
CHK_WUTIME5:
		CMP WU_HRS[4],30H		;CHK HRS[4]<MINS> WITHIN 0~9
		JB GO_INVALID_2
		
		CMP WU_HRS[4],39H
		JA GO_INVALID_2
		
		JMP BA_CONT2
		
CHK_HRS1A:
		CMP SLP_HRS[1],33H		;IF HRS[0] = 2,CHK HRS[1] < 3
		JA GO_INVALID_2
		
		JMP CHK_SLPTIME2

CHK_HRS1B:
		CMP WU_HRS[1],33H		;IF HRS[0] = 2,CHK HRS[1] < 3
		JA GO_INVALID_2
		
		JMP CHK_WUTIME2
		
CHK_EQUAL_1:
		MOV AL,SLP_HRS[1]		;TO CHK WHETHER SLP TIME = WAKE UP TIME
		CMP WU_HRS[1],AL
		JE CHK_EQUAL_2
		
		JMP CHK_WUTIME3
		
CHK_EQUAL_2:
		MOV AL,SLP_HRS[3]		
		CMP WU_HRS[3],AL
		JE CHK_EQUAL_3
		
		JMP CHK_WUTIME3
		
CHK_EQUAL_3:
		MOV AL,SLP_HRS[4]
		CMP WU_HRS[4],AL
		JE GO_INVALID_2
		
		JMP CHK_WUTIME3

GO_INVALID_2:
		JMP INVALID_INPUT	
		
CONT_ASK3:
		NEWLINE

		MOV AH,09H			;ASK USER WHETHER TO CONTINUE BEDTIME ANALYSIS
		LEA DX,ASK_CONT3		
		INT 21H
		
		MOV AH,01H
		INT 21H
		MOV ANS_CONT3,AL
		
		CMP ANS_CONT3,"Y"
		JE CONT_BA

		CMP ANS_CONT3,"y"
		JE CONT_BA
		
		CMP ANS_CONT3,"N"
		JE  GOEXIT

		CMP ANS_CONT3,"n"
		JE GOEXIT
		
		JMP ERROR_CONT3
		
GOEXIT: JMP MAINMENU	
	
CONT_BA:
		JMP BA_START
		
ERROR_CONT3:
		MOV AH,09H
		LEA DX,INV_MSG
		INT 21H
		
		NEWLINE
		
		JMP CONT_ASK3

;-----WORLD CLOCK FUNCTION 
FOUR:
OPEN_FILE:
		LEA DX,FNAME
		MOV AL,0			;READ = 0,WRITE = 1, R&W = 2
		MOV AH,3DH      	;OPEN FILE
		INT 21H

		MOV HANDLE,AX

		LEA SI,TEXT

		NEWLINE

READ_LINE:	
		MOV AH,3FH				;READ FILE
		MOV BX,HANDLE
		LEA DX,CHAR
		MOV CX,1
		INT 21H
		
		CMP AX,0				;IF EOF,AX=0
		JE EO_FILE				;EOF
		
		MOV AL, CHAR
		
		CMP AL,0AH				;LINE FEED
		JE LF
		
		MOV [SI], AL
		INC SI
		
		JMP READ_LINE
	
EO_FILE:
        LEA DX, TEXT    ;DX=OFFSET(ADDRESS) OF TEXT
		MOV AH, 40H     ;PRINT
		MOV CX, SI      ;CX = # CHARACTERS. MOVE POINTER TO LAST CHAR TO IT
		SUB CX, DX      ;SUBTRACT THE OFFSET OF TEXT (IN DX) FROM CX
						;TO GET THE ACTUAL NUMBER OF CHARS IN THE BUFFER
		MOV BX, 1
		INT 21H
		
		JMP OPTIONS
	
LF:
		LEA DX, TEXT    ;DX=OFFSET(ADDRESS) OF TEXT
		MOV AH, 40H     ;PRINT
		MOV CX, SI      ;CX = # CHARACTERS. MOVE POINTER TO LAST CHAR TO IT
		SUB CX, DX      ;SUBTRACT THE OFFSET OF TEXT (IN DX) FROM CX
						;TO GET THE ACTUAL NUMBER OF CHARS IN THE BUFFER
		MOV BX, 1

		INT 21H

		MOV SI, DX      ;START FROM BEGINNING OF BUFFER 
						;(DX=BEGINNING OF TEXT BUFFER)
						
		; MOV AH,09H
		; LEA DX,NEWLINER
		; INT 21H
		
		NEWLINE
		
		JMP READ_LINE
		
OPTIONS:
		MOV AH,09H
		LEA DX,PROMPT1			;PROMPT MSG FOR USER TO SELECT OPTIONS
		INT 21H

		MOV AH,01H
		INT 21H					;READ USED INPUT
		MOV U_CHOICE,AL
		
		CMP U_CHOICE,'1'
		JNE GO_2				;START TO COMPARE USER INPUT
		JMP OPTION_1			;AND JMP TO RESPECTIVE LOCATION
GO_2:		
		CMP U_CHOICE,"2"
		JNE GO_3
		JMP OPTION_2

GO_3:		
		CMP U_CHOICE,"3"
		JNE GO_4
		JMP OPTION_3

GO_4:
		CMP U_CHOICE,"4"
		JNE GO_5
		JMP OPTION_4
	
GO_5:	
		CMP U_CHOICE,"5"
		JNE GO_6
		JMP OPTION_5
		
GO_6:
		CMP U_CHOICE,"6"
		JNE GO_7
		JMP OPTION_6
		
GO_7:		
		CMP U_CHOICE,"7"
		JNE GO_8
		JMP OPTION_7

GO_8:
		CMP U_CHOICE,"8"
		JNE GO_9
		JMP OPTION_8

GO_9:
		CMP U_CHOICE,"9"
		JNE UNKNOWN
		JMP OPTION_9

UNKNOWN:	
		CMP U_CHOICE,"X"
		JE BACKMENU
		
		CMP U_CHOICE,"x"
		JE BACKMENU
		
		JMP GO_ERROR
		
BACKMENU: JMP MAINMENU	
GO_ERROR:
		JMP ERROR_CHOICE
		
		
OPTION_1:
;-------AUSTRALIA,SYDNEY(+2HRS)-------
		CALL CURRENT_TIME
		
		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		ADD HRS[1],02H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

OPTION_2:
;-------ITALY,ROME(-6HRS)-----
		CALL CURRENT_TIME
		
		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		SUB HRS[1],06H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

OPTION_3:
;-------JAPAN,TOKYO(+1HRS)-------
		CALL CURRENT_TIME
		
		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		ADD HRS[1],01H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

OPTION_4:
;------KANTON ISLAND,KIRIBATI(+6HRS)------
		CALL CURRENT_TIME
		
		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		ADD HRS[1],06H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

OPTION_5:
;-----NEW ZEALAND,AUCKLAND(+4HRS)-----
		CALL CURRENT_TIME

		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		ADD HRS[1],04H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1	

OPTION_6:
;------UNITED KINGDOM,LONDON(-7 HRS)-----
		CALL CURRENT_TIME
		
		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		SUB HRS[1],07H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1	
		
OPTION_7:
;------USA,LOS ANGELES(-15 HRS)------
		CALL CURRENT_TIME

		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		SUB HRS[1],0FH		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

OPTION_8:
;------USA,NEW YORK(-12 HRS)-------
		CALL CURRENT_TIME

		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		SUB HRS[1],0CH		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

OPTION_9:
;------SINGAPORE(+0HRS)------
		CALL CURRENT_TIME
		
		ADD HRS[0],02H		;ADD 24 HRS TO EASE CALCULATION
		ADD HRS[1],04H

		ADD HRS[1],00H		;CALCULATION TO ADD/SUB
		
		JMP WC_CONT1

ERROR_CHOICE:
		MOV AH,09H
		LEA DX,INVALID_MSG
		INT 21H
		
		NEWLINE
		
		JMP OPEN_FILE

WC_CONT1:
WC_CONT2:
		CMP HRS[1],30H			;IF LESS THAN 0, NEED TO LEND FROM HRS[0]
		JB DEC_HRS0_1			

		CMP HRS[1],39H
		JA INC_HRS0_1			;IF MORE THAN 9,NEED TO ADD INTO HRS[0]

		CMP HRS[0],34H			;IF ANS MORE THAN 48 = TMR
		JE CHK_TMR				
		JA PRINT_TMR			

		CMP HRS[0],32H			
		JB PRINT_YTD
			
CHK_TDY_YTD_1:
		CMP HRS[0],32H			;IF ANS MORE THAN 24 = TDY/YTD
		JE CHK_TDY_YTD_2		;TO CHECK WHETHER IS YTD OR TDY
		JA PRINT_TDY			
	
		JMP PRINT_YTD

DEC_HRS0_1:						;LEND FROM HRS[0]
    	SUB HRS[0],01H
    	ADD HRS[1],0AH
    	JMP WC_CONT1

INC_HRS0_1:						;ADD INTO HRS[0]
    	SUB HRS[1],0AH
    	ADD HRS[0],01H
    	JMP WC_CONT2

CHK_TMR:						;TO CHECK WHETHER IS IT TMR
		CMP HRS[1],38H
		JAE PRINT_TMR
		JMP CHK_TDY_YTD_1

PRINT_TMR:						;TO PRINT TMR AND SUBTRACT IT WITH 48
		MOV AH,09H
		LEA DX,TMR
		INT 21H

		SUB HRS[0],04H
		SUB HRS[1],08H
		JMP WC_CONT3
	
CHK_TDY_YTD_2:					;TO DOUBLE CHK IS YTD OR TDY
		CMP HRS[1],34H
		JAE PRINT_TDY			;IF >24 = TDY
		JB PRINT_YTD			;IF <24 = YTD
		
		JMP CHK_TDY_YTD_1

PRINT_TDY:						;TO PRINT TDY AND SUBTRACT IT WITH 24
		MOV AH,09H
		LEA DX,TDY
		INT 21H

		SUB HRS[0],02H
		SUB HRS[1],04H
		JMP WC_CONT3

DEC_HRS0_2:						;LEND FROM HRS[0]
    	SUB HRS[0],01H
    	ADD HRS[1],0AH
    	JMP WC_CONT4

INC_HRS0_2:						;ADD INTO HRS[0]
    	ADD HRS[0],01H
    	SUB HRS[1],0AH
    	JMP WC_CONT5

PRINT_YTD:						;TO PRINT TDY
		MOV AH,09H
		LEA DX,YTD
		INT 21H
		
		JMP WC_CONT3

WC_CONT3:
WC_CONT4:
WC_CONT5:
		CMP HRS[1],30H
		JB DEC_HRS0_2			;IF HRS[1] < 0 , LEND FROM HRS[0]

		CMP HRS[1],39H
		JA INC_HRS0_2			;IF HRS[1] > 9, ADD INTO HRS[0]
		
		MOV AH,09H
		LEA DX,W_TIME			;DISPLAY WORLD TIME
		INT 21H
		
		MOV AH,02H
    	MOV DL,HRS[0]			
    	INT 21H

    	MOV AH,02H
    	MOV DL,HRS[1]
    	INT 21H

    	MOV AH,02H
    	MOV DL,":"
    	INT 21H

    	MOV AH,02H
    	MOV DL,MINS[0]
    	INT 21H

    	MOV AH,02H
    	MOV DL,MINS[1]
    	INT 21H	

		JMP CONT_ASK4

CONT_ASK4:
		NEWLINE

		MOV AH,09H					;ASK USER WHETHER TO CONTINUE
		LEA DX,ASK_CONT4
		INT 21H
		
		MOV AH,01H
		INT 21H
		MOV ANS_CONT4,AL
		
		CMP ANS_CONT4,"Y"
		JE CONT_WC

		CMP ANS_CONT4,"y"
		JE CONT_WC
		
		CMP ANS_CONT4,"N"
		JE  JMPBACKMENU

		CMP ANS_CONT4,"n"
		JE JMPBACKMENU
		
		JMP ERROR_CONT4
JMPBACKMENU: JMP MAINMENU		
CONT_WC:
		JMP OPEN_FILE
		
ERROR_CONT4:
		MOV AH,09H
		LEA DX,INVALID_MSG
		INT 21H
		
		NEWLINE
		
		JMP CONT_ASK4
;0------------24--------------48---------------72
;---YESTERDAY-------TODAY----------TOMORROW------

FIVE:
;----CHANGE ALARM SOUND
	MOV AH,09H
	LEA DX,CHGASOUND_LABEL
	INT 21H
	
CHGSOUND:
	MOV AH,09H 
	LEA DX,S23
	INT 21H
	
	MOV AH,09H
	LEA DX,S28
	INT 21H
	
	MOV AH,02H
	MOV DL,CURRENTSOUND
	INT 21H
	
	MOV AH,09H
	LEA DX,S24
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,31H
	JE  O_ST1
	CMP AL,32H
	JE  O_ST2
	CMP AL,33H
	JE  O_ST3
	CMP AL,"X"
	JE  GOMM
	CMP AL,"x"
	JE  GOMM
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP CHGSOUND

GOMM: JMP MAINMENU

O_ST1:
	MOV CX,5
	MOV SI,0
MOV_ST1:
	MOV AX,Q1_NOTES[SI]
	MOV Q_NOTES[SI],AX
	INC SI
	LOOP MOV_ST1		;PLAY SOUNDTRACK2
	
	CALL PLAYALARMSOUND
	MOV ST_OPTION,1
	JMP ASK_CHG	
	
O_ST2:
	MOV CX,5
	MOV SI,0
MOV_ST2:
	MOV AX,Q2_NOTES[SI]
	MOV Q_NOTES[SI],AX
	INC SI
	LOOP MOV_ST2			;PLAY SOUNDTRACK2
	
	CALL PLAYALARMSOUND
	MOV ST_OPTION,2
	JMP ASK_CHG
		
O_ST3:
	MOV CX,5
	MOV SI,0
MOV_ST3:
	MOV AX,Q3_NOTES[SI]
	MOV Q_NOTES[SI],AX
	INC SI
	LOOP MOV_ST3			;PLAY SOUNDTRACK3
	
	CALL PLAYALARMSOUND
	MOV ST_OPTION,3
	JMP ASK_CHG


ASK_CHG:
	MOV AH,09H
	LEA DX,S25
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"Y"
	JE  REPLACE
	CMP AL,"y"
	JE  REPLACE
	CMP AL,"N"
	JE  GOASKCONT
	CMP AL,"n"
	JE  GOASKCONT
	
	MOV AH,09H
	LEA DX,INVALID 
	INT 21H
	
	JMP ASK_CHG
	
REPLACE: 
	MOV AH,09H
	LEA DX,S26
	INT 21H
	
	MOV CX,5
	MOV SI,0
	
	CMP ST_OPTION,1
	JE  CHG1
	CMP ST_OPTION,2
	JE  CHG2
	CMP ST_OPTION,3
	JE  CHG3
	
	
CHG1:
	MOV AX,Q1_NOTES[SI]
	MOV NOTES[SI],AX
	INC SI
	LOOP CHG1
	MOV CURRENTSOUND,31H
	JMP GOASKCONT

CHG2:
	MOV AX,Q2_NOTES[SI]
	MOV NOTES[SI],AX
	INC SI
	LOOP CHG2
	MOV CURRENTSOUND,32H
	JMP GOASKCONT
	
CHG3:
	MOV AX,Q3_NOTES[SI]
	MOV NOTES[SI],AX
	INC SI
	LOOP CHG3
	MOV CURRENTSOUND,33H
	JMP GOASKCONT

GOASKCONT:
	MOV AH,09H
	LEA DX,S27
	INT 21H
	
	MOV AH,01H
	INT 21H
	
	CMP AL,"Y"
	JE  GOCHG_SOUND
	CMP AL,"y"
	JE  GOCHG_SOUND
	CMP AL,"N"
	JE  BACKMM
	CMP AL,"n"
	JE  BACKMM
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H
	
	JMP GOASKCONT
	
GOCHG_SOUND: JMP CHGSOUND
BACKMM: JMP MAINMENU


EXIT:	
	MOV AH,4CH
	INT 21H
MAIN ENDP

CURRENT_TIME PROC
	MOV AH,2CH  ; GET CURRENT TIME IN DECIMAL
	INT 21H
	
	MOV AX,0	; CLEAR AX
	MOV AL,CL  	; DH-SECONDS, CL-MINS, CH-HOUR
		
	DIV TEN
	MOV MINS[0],AL
	MOV MINS[1],AH
	
	ADD MINS[0],30H
	ADD MINS[1],30H

	MOV AX,0
	MOV AL,CH
	
	DIV TEN
	MOV HRS[0],AL
	MOV HRS[1],AH
	
	ADD HRS[0],30H
	ADD HRS[1],30H
	
	NEWLINE
	
	MOV AH,09H
	LEA DX,CUR_TIME
	INT 21H
	
	MOV AH,02H
	MOV DL,HRS[0]
	INT 21H
	
	MOV AH,02H
	MOV DL,HRS[1]
	INT 21H
	
	MOV AH,02H
	MOV DL,":"
	INT 21H
	
	MOV AH,02H
	MOV DL,MINS[0]
	INT 21H

	MOV AH,02H
	MOV DL,MINS[1]
	INT 21H
	RET
CURRENT_TIME ENDP 

;-----MOVE THE SECOND ALARM TO FIRST ALARM
MOVALR2TO1 PROC

	MOV  AL,AHR[1]
	MOV  AHR[0],AL			
	MOV  AL,AHR2[1]
	MOV  AHR2[0],AL
	MOV  AL,AMIN[1]
	MOV  AMIN[0],AL
	MOV  AL,AMIN2[1]
	MOV  AMIN2[0],AL
	
	MOV AL,SNODURATION[1]
	MOV SNODURATION[0],AL
	MOV SNODURATION[1],31H
	
	RET
MOVALR2TO1 ENDP

PLAYALARMSOUND PROC
	MOV AH,09H
	LEA DX,S29
	INT 21H
	
	MOV SI,0
A_SOUND:	
	MOV AL,182		; set up speaker by sending the value 182
	OUT 43H,AL		; to port 43h
	MOV AX,Q_NOTES[SI];frequency number(in dec)
	
	OUT 42H,AL
	MOV AL,AH
	OUT 42H,AL
	IN AL,61H
	
	OR AL,00000011B
	OUT 61H,AL
	MOV CX,10		;control duaration of sound
	
A_STOP1:
	MOV BX,65535	; produce one sound

A_STOP2:
	DEC BX
	JNE A_STOP2		; continue jmp when BX is not zero
	DEC CX
	JNE A_STOP1
			
	INC SI
	CMP SI,5
	JNE  A_SOUND

	IN AL,61H
	
	AND AL,11111100B
	OUT 61H,AL
	
	RET
	
PLAYALARMSOUND ENDP	

END MAIN

